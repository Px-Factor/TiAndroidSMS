/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.android.sms;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.telephony.SmsManager;

import java.util.ArrayList;

@Kroll.module(name="Sms", id="ti.android.sms")
public class SmsModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "SmsModule";
	private static final boolean DBG = TiConfig.LOGD;

	private static final String MESSAGE_SENT = "SMS_SENT";
	private static final String MESSAGE_DELIVERED = "SMS_DELIVERED";
	
	@Kroll.constant
	public static final int SENT = 0;
	@Kroll.constant
	public static final int DELIVERED = 1;
	@Kroll.constant
	public static final int CANCELLED = -1;
	@Kroll.constant
	public static final int FAILED = -2;

	
	
	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public SmsModule()
	{
		super();
		setupIntentReceivers();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
	}
	
	
	void setupIntentReceivers() {
		
		Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
		//Activity currentActivity = this.getActivity();
		
		//let's register broadcast receivers
		
		BroadcastReceiver sentReceiver = new BroadcastReceiver(){
			@Override
			public void onReceive(Context context, Intent intent) {
				KrollDict event;
				switch (getResultCode())
				{
				case Activity.RESULT_OK:
					event = createEventObject(true, SENT, "Message sent");
					Log.d(LCAT, "message sent");
					fireEvent("complete", event);
					break;
				default: 
					event = createEventObject(false, FAILED, "Message delivery failed");
					Log.d(LCAT, "message sending failure");
					fireEvent("complete", event);
					break;
				}
			}
		};
		
		//---when the SMS has been sent---
		currentActivity.registerReceiver(sentReceiver, new IntentFilter(MESSAGE_SENT));

		
		BroadcastReceiver deliveredReceiver = new BroadcastReceiver(){
			@Override
			public void onReceive(Context context, Intent intent) {
				KrollDict event;
				switch (getResultCode())
				{
				case Activity.RESULT_OK:
					event = createEventObject(true, DELIVERED, "Message delivered");
					Log.d(LCAT, "message delivered");
					fireEvent("complete", event);
					break;
				case Activity.RESULT_CANCELED:
					event = createEventObject(false, FAILED, "Operation canceled");
					Log.d(LCAT, "message delivering failure");
					fireEvent("complete", event);
					break;                        
				}
			}
		}; 
		
		//---when the SMS has been delivered---
		currentActivity.registerReceiver(deliveredReceiver, new IntentFilter(MESSAGE_DELIVERED));        
	}
	
	public KrollDict createEventObject (boolean success, int result, String resultMessage) 
	{
		KrollDict event = new KrollDict();
		event.put("success", success);
		event.put("result", result);
		event.put("resultMessage", resultMessage);

		return event;
	}
	

	// Methods
	@Kroll.method
	public void sendSMS(String recipient, String messageBody)
	{
		Activity currentActivity = this.getActivity();

		Intent sentIntent = new Intent(MESSAGE_SENT);
		Intent deliveredIntent = new Intent(MESSAGE_DELIVERED);
		
		PendingIntent sentPI = PendingIntent.getBroadcast(currentActivity, 0,
				sentIntent, 0);

		PendingIntent deliveredPI = PendingIntent.getBroadcast(currentActivity, 0,
				deliveredIntent, 0);
		
		ArrayList<PendingIntent> sentIntents = new ArrayList<PendingIntent>();
		
		ArrayList<PendingIntent> deliveryIntents = new ArrayList<PendingIntent>();
		
		SmsManager sms = SmsManager.getDefault();
		
		ArrayList<String> parts = sms.divideMessage(messageBody);
		
		for (int i = 0; i < parts.size(); i++) {
			sentIntents.add(i, sentPI);

			deliveryIntents.add(i, deliveredPI);
        }
		
		sms.sendMultipartTextMessage(recipient, null, parts, sentIntents, deliveryIntents);
	}
	

}

